REQUIRED SOFTWARE
=================

Calculations:
- Matlab or Octave: https://www.gnu.org/software/octave/index
- Slepian software package: https://github.com/Slepian/Slepian

Plotting:
GMT 6: https://www.generic-mapping-tools.org/


DATA SOURCE
===========

Galileo data
------------

The Galileo data were downloaded from https://pds-ppi.igpp.ucla.edu/search/view/?f=yes&id=pds://PPI/GO-J-MAG-3-RDR-HIGHRES-V1.0/DATA/SATELLITES/GANYMEDE and stored in the folder "originalData". We then used the function GSPRH2IAU.m to transform the GSPRH coordinate system into the IAU coordinate system.


Juno data
---------

Juno data requires a bit more work.
The Jupiter-centric data were downloaded from
https://pds-ppi.igpp.ucla.edu/data/JNO-J-3-FGM-CAL-V1.0/DATA/JUPITER/PC/PERI-34/fgm_jno_l3_2021158pc_r60s_v01.sts

We then removed the header and saved the headerless file as JunoData/MagData/fgm_jno_l3_2021158pc_r1s_v01_nohdr.txt

Next, we use the spice kernels to transform the Juno data to IAU Ganymede data. To download the required spice kernels, run in a command prompt in the directory JunoData/

wget -r -N -l inf -nH --cut-dirs=5 -nv -i urls_jnosp_1000_210501_210801.txt

This will fill up quite some hard drive space, so the downloaded files are not part of this package.

Once everything is downloaded, run the python script JunoData.py from the command prompt:

python JunoData.py

To use spiceypy to transform the Juno data from Jupiter's coordinate system to Ganymede IAU using the Spice Kernels  



FIRST TIME SETUP
================

Edit initialize.m to set the directory where you installed the Slepian software package


BASICS
======

After starting Matlab/Octave, run

initialize

To learn how to use the various functions, have a look at getUncertainty.m
That script incorporates all aspects to get many inversion results for a choice of parameters (Lmax, coefficients) and for random data subselection.

For example:
cfmat=getUncertainty([],[],2,'Lmax2_allcoef',[],[],[],0.5,10);
Make sure that you have a folder named "coefs" in your directory such that the result can be saved.


To play around with different parameter choices, try out
tryDifferentLtwo.m
and
tryDifferentEig.m

For example:
coefs=tryDifferentLtwo(6,-37.25);

The script "writeAvgField" then writes out the average result from these calculations:
writeAvgField(2,'Lmax2_allcoef',[]);



REPRODUCTION OF PAPER FIGURES AND TABLES
========================================

Table 1
-------

Use JupBgTable.m for example: JupBgTable(1) for the values of G1 or JupBgTable(101) for the values of the Juno flyby


Figure 2
--------

Prepare data with

showMoreData()

Then plot in GMT using (from the command line)

./showMoreData.sh


Figure 3
--------

showCorr.m: Calculate and write out correlation matrix
To greate the corresponding figure, run

./plotCorrelation.sh CorrMat_Lmax2_weighting_true


Table 2
-------
For each inversion parameter selection, run getUncertainty.m, for example:
cfmat = getUncertainty([],[],1,'Lmax1',[],[],[],0.5,100);

The coefficients cfmat will be stored in coefs/Lmax1_manycoefs.mat

The Uniform field is the last ntracks*3 entries of cfmat:
BU = cfmat(end-3*7+1:end,:);
mean(BU,2)
std(BU,[],2)

You can get the rms values for each track using getRMS.m

Specifically, I ran:

cfmat = getUncertainty([],[],1,'Lmax1',[],[],[],0.5,100,false,false);

cfmat = getUncertainty([],[],2,'Lmax2',[],[],[],0.5,100,false,false);

cfmat = getUncertainty(6,-37.3,2,'Lmax2_B_i6_v-37p25',[],[],[],0.5,100,false,false);

cfmat = getUncertainty(7,23.8,2,'Lmax2_C_i7_v23p8',[],[],[],0.5,100,false,false);  

cfmat = getUncertainty(24,[],2,'Lmax2-svd-SV24',[],[],[],0.5,100,false,false);


Table 3
-------

Use the output cfmat of getUncertainty (or load it from the coefs folder). 

The coefficients are stored in a normalization different from the Schmidt normalization used by the mag community. To get the correct normalization, use the provided Schmidt renormalization:

[coef,lmcosi] = SchmidtCoef(mean(cfmat,2),2); % The last 2 means Lmax=2

[stdcoef,stdlmcosi] = SchmidtSTD(cfmat,2);

The lmcosi matrix has four columns: l, m, cos, sin.
The last two columns contain the Schmidt coefficients for cos and sin parts of the spherical harmonic expansion.
lmcosi(2:end,3:4)'  makes it easier to enter the right values into the latex table


Figure 4
--------
Write out the spatial representation of the fields using writeAvgField.m, then run paperFieldsFigSameRange.sh 

writeAvgField(1,'Lmax1_manycoefs',[]);
writeAvgField(2,'Lmax2_manycoefs',[]);
writeAvgField(2,'Lmax2_B_i6_v-37p25_manycoefs',[]);
writeAvgField(2,'Lmax2_C_i7_v23p8_manycoefs',[]);
writeAvgField(2,'Lmax2_D_svd24_manycoefs',[]);
writeAvgField(2,'Lmax2_E_svd25_manycoefs',[]);

then in a command prompt, run
./paperFieldsFigSameRange.sh


Table 4
-------
Get the rms values for individual tracks using

rmstracks = getRMS(mean(cfmat,2),Lmax);

Set Lmax to the max spharm degree of the coefs, like 2 or so. 

To get the overall rms, run

rms(rmstracks)



Table 5
-------

Need to calculate the models for all ocean options:

cfmat = getUncertainty([],[],1,'Lmax1',[],[],[],0.5,100,false,false);
cfmat = getUncertainty([],[],2,'Lmax2',[],[],[],0.5,100,false,false);
cfmat = getUncertainty(6,-37.25,2,'Lmax2_B_i6_v-37p25',[],[],[],0.5,100,false,false);
cfmat = getUncertainty(7,23.8,2,'Lmax2_C_i7_v23p8',[],[],[],0.5,100,false,false);  
cfmat = getUncertainty(24,[],2,'Lmax2-svd-SV24',[],[],[],0.5,100,false,false);
cfmat = getUncertainty(25,[],2,'Lmax2-svd-SV25',[],[],[],0.5,100,false,false);

cfmat = getUncertainty([],[],1,'Lmax1_indhigh',[],[],'high',0.5,100,false,false);
cfmat = getUncertainty([],[],2,'Lmax2_indhigh',[],[],'high',0.5,100,false,false);
cfmat = getUncertainty(6,-37.25,2,'Lmax2_B_i6_v-37p25_indhigh',[],[],'high',0.5,100,false,false);
cfmat = getUncertainty(7,23.8,2,'Lmax2_C_i7_v23p8_indhigh',[],[],'high',0.5,100,false,false);  
cfmat = getUncertainty(24,[],2,'Lmax2-svd-SV24_indhigh',[],[],'high',0.5,100,false,false);
cfmat = getUncertainty(25,[],2,'Lmax2-svd-SV25_indhigh',[],[],'high',0.5,100,false,false);

cfmat = getUncertainty([],[],1,'Lmax1_indlow',[],[],'low',0.5,100,false,false);
cfmat = getUncertainty([],[],2,'Lmax2_indlow',[],[],'low',0.5,100,false,false);
cfmat = getUncertainty(6,-37.25,2,'Lmax2_B_i6_v-37p25_indlow',[],[],'low',0.5,100,false,false);
cfmat = getUncertainty(7,23.8,2,'Lmax2_C_i7_v23p8_indlow',[],[],'low',0.5,100,false,false);  
cfmat = getUncertainty(24,[],2,'Lmax2-svd-SV24_indlow',[],[],'low',0.5,100,false,false);
cfmat = getUncertainty(25,[],2,'Lmax2-svd-SV25_indlow',[],[],'low',0.5,100,false,false);

cfmat = getUncertainty([],[],1,'Lmax1_indsimple',[],[],'simple',0.5,100,false,false);
cfmat = getUncertainty([],[],2,'Lmax2_indsimple',[],[],'simple',0.5,100,false,false);
cfmat = getUncertainty(6,-37.25,2,'Lmax2_B_i6_v-37p25_indsimple',[],[],'simple',0.5,100,false,false);
cfmat = getUncertainty(7,23.8,2,'Lmax2_C_i7_v23p8_indsimple',[],[],'simple',0.5,100,false,false);  
cfmat = getUncertainty(24,[],2,'Lmax2-svd-SV24_indsimple',[],[],'simple',0.5,100,false,false);
cfmat = getUncertainty(25,[],2,'Lmax2-svd-SV25_indsimple',[],[],'simple',0.5,100,false,false);



Figure 5
--------

The simulated data was written out as part of the writeAvgField.m call for Figure 4, so we can directly plot them in GMT.
However, we must make sure that the BJ-subtracted real data are ready. To do that, run in Matlab:

exportData()
exportJunoData()

Then to plot in a terminal:

./plotDataJuno.sh Lmax1_manycoefs_simData
./plotDataJuno.sh Lmax2_manycoefs_simData
./plotDataJuno.sh Lmax2_B_i6_v-37p25_manycoefs_simData



Figure 6
--------

If all data is ready to plot Fig 5, you can plot Figure 6 using the following GMT scripts from the command line

./plotDataJuno.sh Lmax2_manycoefs_simData
./plotDataJuno.sh Lmax2_B_i6_v-37p25_manycoefs_simData



Table 6
-------

run in Matlab LOCV(Lmax,ind,fix).
  % fix = [] : either L1 or L2A
  % fix = 1 : L2B
  % fix = 2 : L2C
  % fix = 3 : L2D
  % fix = 4 : L2E

LOCV(1,[],[]);
LOCV(1,'high',[])

LOCV(2,'low',2)

LOCV(2,'simple',4)

or quick and easy:
rmsvals = LOCV(2,[],[]); rms(rmsvals)
to get the Leave One Out Cross Validation for Lmax = 2, lsq, no induced field 


Table 7
-------

Use makeQDtable.m to create tables of the Q/D values for all models and three different core radii.


Figure 7
--------

Prepare the linear combinations running in Matlab
manyCoefLinComb()

Then run in the terminal:
./plotLinComb.sh


Figure 8
--------

In Matlab, prepare the model differences for plotting using showModelDifference.m

showModelDifference('Lmax2_manycoefs', 2, 'Lmax2_B_i6_v-37p25_manycoefs', 2)
showModelDifference('Lmax2_B_i6_v-37p25_manycoefs', 2, 'Lmax2_C_i7_v23p8_manycoefs', 2)

Then in a command prompt:

./plotFieldsTracksAbs.sh Lmax2_manycoefs_minus_Lmax2_B_i6_v-37p25_manycoefs_alt800_field_cmp1 35 7

./plotFieldsTracksAbs.sh Lmax2_B_i6_v-37p25_manycoefs_minus_Lmax2_C_i7_v23p8_manycoefs_alt800_field_cmp1 30 7.5

These commands are also in the script showFieldDifferences.sh, so you could just run that one:
./showFieldDifferences.sh


To create the field from the omitted singular values, run in Matlab:
showSingValField(2,24,800)
and
showSingValField(2,25,800)

Then in the terminal
./showSVfields.sh

I am omitting these from the paper because I can't make much sense of them.





























BELOW ARE OLDER INSTRUCTIONS. Some of the functions changed and may be outdated

Instructions:
-------------

Calculations:

In Matlab or Octave, initialize the Slepian software:

initialize

Make sure that you set the path in initialize to the correct path of your Slepian codes, or just copy all the codes into your Slepian folder.
Then run makeMyField(g10,Lmax,filename), for example

makeMyField(-700,3,'Lmax_3_g10_-700_allGalileoTracks')
or
makeMyField(-700,3,'Lmax3_g10_-700_JunoAndAllGalileo')

Plotting:

In the command line, run ./makeMyFigs.sh filename for example:

./makeMyFigs.sh Lmax_3_g10_-700_allGalileoTracks 1119.86
or
./makeMyFigsJuno.sh Lmax3_g10_-700_JunoAndAllGalileo 1115.88

For the plotting you need to have GMT 6 installed.

The figures are saved in the "figures" folder


